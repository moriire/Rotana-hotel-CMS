"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(typeof self !== 'undefined' ? self : this)["webpackHotUpdateappuix"]("about",{

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/views/EditPageView.vue?vue&type=script&lang=js":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/views/EditPageView.vue?vue&type=script&lang=js ***!
  \*****************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'EditPageView',\n  inject: [\"globals\"],\n\n  data() {\n    return {\n      form: {\n        user: {},\n        room: [],\n        menu: [],\n        about: {\n          id: \"\",\n          body: \"\",\n          thumb: \"\"\n        },\n        page: [{\n          title: 'home',\n          title_alias: ''\n        }, {\n          title: 'about',\n          title_alias: ''\n        }, {\n          title: 'contact',\n          title_alias: ''\n        }, {\n          title: 'menu',\n          title_alias: ''\n        }, {\n          title: 'review',\n          title_alias: ''\n        }],\n        contact: [],\n        review: []\n      }\n    };\n  },\n\n  created() {\n    this.gStaffs();\n  },\n\n  mounted() {},\n\n  methods: {\n    pageHeaders(x) {\n      if (this.form.page) {\n        return this.form.page.filter(y => y.title == x)[0];\n      } else {\n        return {};\n      }\n    },\n\n    async gStaffs() {\n      try {\n        const res = await axios__WEBPACK_IMPORTED_MODULE_0___default().get(`${location.origin}/v1/api/hotel/?user__email=${this.$route.params.user_id}@gmail.com`);\n        this.form = res.data[0];\n        alert(444);\n        document.title = `Editing ${this.form.user.business_name} page`;\n      } catch (e) {\n        alert(\"Welcome\"); //location.href = \"/admin/\"\n      }\n    }\n\n  },\n  computed: {\n    homepage() {\n      return this.pageHeaders('home');\n    },\n\n    aboutpage() {\n      return this.pageHeaders('about');\n    }\n\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/views/EditPageView.vue?vue&type=script&lang=js\n");

/***/ })

});