/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(typeof self !== 'undefined' ? self : this)["webpackHotUpdateappuix"]("about",{

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/views/EditPageView.vue?vue&type=script&lang=js":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/views/EditPageView.vue?vue&type=script&lang=js ***!
  \*****************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'EditPageView',\n  inject: [\"globals\"],\n\n  data() {\n    return {\n      form: {\n        user: {},\n        room: [],\n        menu: [],\n        about: {\n          id: \"\",\n          body: \"\",\n          thumb: \"\"\n        },\n        page: [{\n          title: 'home',\n          title_alias: ''\n        }, {\n          title: 'about',\n          title_alias: ''\n        }, {\n          title: 'contact',\n          title_alias: ''\n        }, {\n          title: 'menu',\n          title_alias: ''\n        }, {\n          title: 'review',\n          title_alias: ''\n        }],\n        contact: [],\n        review: []\n      }\n    };\n  },\n\n  created() {\n    this.gStaffs();\n  },\n\n  mounted() {},\n\n  methods: {\n    pageHeaders(x) {\n      if (this.form.page) {\n        return this.form.page.filter(y => y.title == x)[0];\n      } else {\n        return {};\n      }\n    },\n\n    async gStaffs() {\n      try {\n        const res = await axios__WEBPACK_IMPORTED_MODULE_0___default().get(`${location.origin}/v1/api/hotel/?user__email=${this.$route.params.user_id}@gmail.com`);\n        this.form = res.data[0];\n        alert(444);\n        document.title = `Editing ${this.form.user.business_name} page`;\n      } catch (e) {\n        alert(\"Welcome\"); //location.href = \"/admin/\"\n      }\n    }\n\n  },\n  computed: {\n    homepage() {\n      return this.pageHeaders('home');\n    }\n\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/views/EditPageView.vue?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/views/EditPageView.vue?vue&type=template&id=7f481c38":
/*!*********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/views/EditPageView.vue?vue&type=template&id=7f481c38 ***!
  \*********************************************************************************************************************************************************************************************************************************************************************/
/***/ (function() {

throw new Error("Module build failed (from ./node_modules/babel-loader/lib/index.js):\nSyntaxError: C:\\Users\\Mobolaji\\Desktop\\acsolot\\Rotana-hotel-CMS\\appuix\\src\\views\\EditPageView.vue: Unexpected token (833:69)\n\n\u001b[0m \u001b[90m 831 |\u001b[39m           ])\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 832 |\u001b[39m           _createElementVNode(\u001b[32m\"div\"\u001b[39m\u001b[33m,\u001b[39m _hoisted_16\u001b[33m,\u001b[39m [\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 833 |\u001b[39m             _createElementVNode(\u001b[32m\"h2\"\u001b[39m\u001b[33m,\u001b[39m _hoisted_17\u001b[33m,\u001b[39m _toDisplayString({{ aboutpage\u001b[33m.\u001b[39mtitle_alias \u001b[33m||\u001b[39m aboutpage\u001b[33m.\u001b[39mtitle) \u001b[33m+\u001b[39m \u001b[32m\" }}!\"\u001b[39m\u001b[33m,\u001b[39m \u001b[35m1\u001b[39m \u001b[90m/* TEXT */\u001b[39m)\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m                                                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 834 |\u001b[39m             _createElementVNode(\u001b[32m\"p\"\u001b[39m\u001b[33m,\u001b[39m _hoisted_18\u001b[33m,\u001b[39m _toDisplayString($data\u001b[33m.\u001b[39mform\u001b[33m.\u001b[39mabout\u001b[33m.\u001b[39mbody)\u001b[33m,\u001b[39m \u001b[35m1\u001b[39m \u001b[90m/* TEXT */\u001b[39m)\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 835 |\u001b[39m             _hoisted_19\u001b[0m\n\u001b[0m \u001b[90m 836 |\u001b[39m           ])\u001b[0m\n    at instantiate (C:\\Users\\Mobolaji\\Desktop\\acsolot\\Rotana-hotel-CMS\\appuix\\node_modules\\@babel\\parser\\lib\\index.js:72:32)\n    at constructor (C:\\Users\\Mobolaji\\Desktop\\acsolot\\Rotana-hotel-CMS\\appuix\\node_modules\\@babel\\parser\\lib\\index.js:359:12)\n    at Object.raise (C:\\Users\\Mobolaji\\Desktop\\acsolot\\Rotana-hotel-CMS\\appuix\\node_modules\\@babel\\parser\\lib\\index.js:3339:19)\n    at Object.unexpected (C:\\Users\\Mobolaji\\Desktop\\acsolot\\Rotana-hotel-CMS\\appuix\\node_modules\\@babel\\parser\\lib\\index.js:3377:16)\n    at Object.parsePropertyName (C:\\Users\\Mobolaji\\Desktop\\acsolot\\Rotana-hotel-CMS\\appuix\\node_modules\\@babel\\parser\\lib\\index.js:13857:24)\n    at Object.parsePropertyDefinition (C:\\Users\\Mobolaji\\Desktop\\acsolot\\Rotana-hotel-CMS\\appuix\\node_modules\\@babel\\parser\\lib\\index.js:13688:22)\n    at Object.parseObjectLike (C:\\Users\\Mobolaji\\Desktop\\acsolot\\Rotana-hotel-CMS\\appuix\\node_modules\\@babel\\parser\\lib\\index.js:13608:21)\n    at Object.parseExprAtom (C:\\Users\\Mobolaji\\Desktop\\acsolot\\Rotana-hotel-CMS\\appuix\\node_modules\\@babel\\parser\\lib\\index.js:12998:23)\n    at Object.parseExprAtom (C:\\Users\\Mobolaji\\Desktop\\acsolot\\Rotana-hotel-CMS\\appuix\\node_modules\\@babel\\parser\\lib\\index.js:8039:20)\n    at Object.parseExprSubscripts (C:\\Users\\Mobolaji\\Desktop\\acsolot\\Rotana-hotel-CMS\\appuix\\node_modules\\@babel\\parser\\lib\\index.js:12648:23)");

/***/ }),

/***/ "./src/views/EditPageView.vue?vue&type=template&id=7f481c38":
/*!******************************************************************!*\
  !*** ./src/views/EditPageView.vue?vue&type=template&id=7f481c38 ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_40_use_0_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_3_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_EditPageView_vue_vue_type_template_id_7f481c38__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[3]!../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./EditPageView.vue?vue&type=template&id=7f481c38 */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/views/EditPageView.vue?vue&type=template&id=7f481c38");


/***/ })

});